name: Deploy Infrastructure

on:
  push:
    branches: [ develop ]
    paths: [ 'aws-infra/**', '.github/workflows/**' ]
  pull_request:
    branches: [ develop ]
    paths: [ 'aws-infra/**', '.github/workflows/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: astra

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          # Generate unique timestamp for stack name
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "STACK_NAME=astra-infrastructure-dev-${TIMESTAMP}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=astra-deployments-dev-${AWS_ACCOUNT_ID}" >> $GITHUB_ENV

      - name: Upload CloudFormation templates to S3
        working-directory: aws-infra
        run: |
          # Create deployment bucket if it doesn't exist
          aws s3 mb "s3://$DEPLOYMENT_BUCKET" --region $AWS_REGION || echo "Bucket already exists"
          
          # Upload only essential templates for now
          aws s3 cp cloudformation/s3.yaml "s3://$DEPLOYMENT_BUCKET/cloudformation/s3.yaml"
          aws s3 cp cloudformation/vpc.yaml "s3://$DEPLOYMENT_BUCKET/cloudformation/vpc.yaml"

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file aws-infra/cloudformation/parent-simple.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
              Environment=dev \
              ProjectName=$PROJECT_NAME \
              AWSAccountId=$AWS_ACCOUNT_ID \
            --capabilities CAPABILITY_NAMED_IAM \
            --region $AWS_REGION

      - name: Clean up old stacks (optional)
        run: |
          # List all stacks with astra-infrastructure-dev prefix
          OLD_STACKS=$(aws cloudformation list-stacks \
            --query 'StackSummaries[?contains(StackName, `astra-infrastructure-dev`) && StackStatus==`CREATE_COMPLETE`].StackName' \
            --output text)
          
          # Keep only the 3 most recent stacks, delete the rest
          if [ ! -z "$OLD_STACKS" ]; then
            echo "Found old stacks: $OLD_STACKS"
            # This is optional - you can remove this step if you want to keep all stacks
            echo "Note: Old stack cleanup is disabled for safety. Manual cleanup recommended."
          fi

